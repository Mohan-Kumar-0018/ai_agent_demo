Agent:
Generate Python code that uses the Agno AI agent framework.
Use OpenAIChat provided by openai model
Then, use the agent to print the response for the prompt "Share a 2 sentence comedy story".

Use the following versions for agno and openai
agno==1.5.6 and openai==1.83.0
add packages to requirements.txt


Postgres Agent:

Generate Python code using the Agno AI agent framework.

1. Use the PostgresTools tool with the following credentials:
    user: postgres
    password: postgres
    host: localhost
    port: 5432
    db_name: stock_demo

2. Create an agent named "StockDemoAI" using the gpt-4o model from OpenAI with the description: "An AI agent that can query stock data and perform database operations."

3. Add the Postgres tool to the agentâ€™s tool list and enable show_tool_calls.

4. Finally, run the agent with this natural language query:
    "What are top 2 warehouses with highest orders count? Give me the warehouse name and the count of orders."

5. Print the agent's response to the terminal.


Github Agent:

1. Generate a Python script using the Agno AI agent framework to interact with GitHub using the GitHubTools module.
2 Load environment variables using dotenv, especially for GITHUB_ACCESS_TOKEN.
3. Create an agent named "GitHub Agent" using the gpt-4o model from OpenAI with the following:
    Role: "Perform various GitHub operations like fetching pull requests, stars, issues, etc."
    Description/instructions: "Help with GitHub operations including fetching repository information, pull requests, issues, etc."
4. Attach GithubTools to the agent with all of the following tools enabled:
    get_repository_stars
    get_pull_request_count
    get_pull_requests
    get_pull_request_changes
    get_pull_request_with_details
    get_pull_request_comments
5. Finally, run the agent with this query:
"Get the latest PR in repo: shopuptech/warehouse_mgmt_service? Who is the author of the PR? What is the title of the PR?"
6.Print the agent's result to the terminal.

Sample queries:
    query = "How many open PRs are there in the repo: Mohan-Kumar-0018/rag-demo ?"
    query = "Get the last 5 PR in repo: shopuptech/warehouse_mgmt_service , Give the summary of each PR, the author of the PR and the title of the PR. Give in below format: PR ID: <pr_id> Author: <author> PR Title: <title> PR Summary: <summary> PR Description: <description> PR Files: <files> PR Status: <status> PR Comments: <comments>"


Postgres Tables:

1. Table : warehouses
    Columns : id, name, location, manager
2. Table : products
    Columns : id, name, code, price
3. Table : orders
    Columns : id, product_id, warehouse_id, quantity, order_date
4. Table : stock
    Columns : id, product_id, warehouse_id, quantity

Give create table queries for the above tables in postgres.

1. Table : warehouses
    Columns : id, name, location, manager    
    Use locations as Chennai, Bengaluru, Hyderabad, Mumbai, Kolkata.
    Use managers as Mohan, Selva, Raj, Soorya, Subash.
    Use warehouse names based on location name.
    Give 5 insert queries for the above table.

2. Table : products
    Columns : id, name, code, price
    Give 5 insert queries for the above table.
    Use these products:
    Voltas 1.5 Ton 3 Star Inverter Split AC (183V Vectra CAW)
    Daikin 1.5 Ton 3 Star Inverter Split AC (MTKL50U)
    LG 1.5 Ton 5 Star AI Dual Inverter Split AC (TS-Q19YNZE)
    Panasonic 1.5 Ton 5 Star Wi-Fi Inverter Smart Split AC (CS/CU-NU18ZKY5W)
    Godrej 1.5 Ton 5 Star 5-in-1 Convertible Inverter Split AC (EI 18IINV5R32 WYS)


3. Table : orders
    Columns : id, product_id, warehouse_id, quantity, order_date
    Use product id 1-5 and warehouse id 1-5.
    Use quantity between 5-50.
    Use order_date as last 5 days.
    Give 20 insert queries for the above table.
    

4. Table : stock
    Columns : id, product_id, warehouse_id, quantity
    Use product id 1-5 and warehouse id 1-5.
    Use quantity between 5-50.
    Give 20 insert queries for the above table.
    




